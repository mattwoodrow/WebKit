# Copyright (C) 2024 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# This file contains a list of data generated by a Document in one WebContent process
# that needs to be synchronized to other WebContent processes.
# The current WebKit implementation of the DocumentSyncClient is stored per-Page, and
# handles broadcasting changes to DocumentSyncData for the current top-document.
#
# It is processed by `generate-process-sync-data.py`
#
# The format is:
#     <Data name> : <Data type>
#
# Example:
# `MainFrameURLChange : WTF::URL`
#
# That declaration results in:
# - A new `MainFrameURLChange` type being added to the generated `DocumentSyncDataType` enum class
# - The inclusion of `WTF::URL` in the `DocumentSyncDataVariant` variant
# - `void broadcastMainFrameURLChangeToOtherProcesses(const WTF::URL&);` being added to DocumentSyncClient
# - Updates to the `DocumentSyncSerializationData` struct and its serialization.in file so CoreIPC messaging works
#
# To send a "main frame url change" message to all other processes from manually written code:
# `page->documentSyncClient().broadcastMainFrameURLChange(someURL);`
#
# The message sending to the UI process and re-routing of the broadcast to relevant WebContent processes
# is automatic; no additional code needs to be written for simple broadcasts.
#
# To handle a "main frame url change" update in the processes targetted by the broadcast, update:
# `void Page::updateTopDocumentSyncData(const DocumentSyncSerializationData& data)`
# by handling the new enum mentioned above.
#
# (Since it defaults to unhandled, the build will fail pointing you exactly where to go)
#
# Each entry can have a number of options in a [bracket enclosed, space delimited list]
# These options currently include:
#   - A compile time condition for inclusion of the data type
#   - A header required to declare/define the type

AudioSessionType : WebCore::DOMAudioSessionType [Conditional=ENABLE(DOM_AUDIO_SESSION) Header=<WebCore/DOMAudioSession.h>]
IsAutofocusProcessed : bool
UserDidInteractWithPage : bool
IsClosing : bool
DocumentURL : URL [Header=<wtf/URL.h>]
DocumentSecurityOrigin : RefPtr<WebCore::SecurityOrigin> [Header=<WebCore/SecurityOrigin.h>]
DocumentClasses : OptionSet<WebCore::DocumentClass> [Header=<WebCore/DocumentClasses.h>]
HasInjectedUserScript : bool
